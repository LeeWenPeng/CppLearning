## 概念

共享内存允许两个或多个进程共享物理内存的同一块区域（通常称为段）。

由于一个共享内存会成为一个进程用户空间的一部分，因此，这种IPC机制，不需要内核的介入。

当一个进程将数据复制进共享内存中，这部分数据会对所有共享同一个段的进程可用。

## 使用步骤

在Linux系统中，使用共享内存（Shared Memory）进行进程间通信（IPC）的流程可分为以下步骤：

### **1. 创建或获取共享内存段：`shmget()`**
- **功能**：  
  根据指定的键值（`key`）创建新共享内存段，或获取已存在的共享内存段标识符。
  
- **参数解析**：
  - `key`：唯一标识共享内存段的键值，通常通过 `ftok()` 生成或使用 `IPC_PRIVATE`（私有新建）。
  - `size`：共享内存段的大小（字节）。
  - `shmflg`：标志位，如 `IPC_CREAT | 0666`（创建并设置权限）。
  
- **返回值**：  
  成功返回共享内存标识符（`shmid`），失败返回 `-1`。

### **2. 附加共享内存到进程地址空间：`shmat()`**
- **功能**：  
  将共享内存段映射到调用进程的虚拟地址空间，使进程可直接访问该内存。
- **参数解析**：
  - `shmid`：由 `shmget()` 返回的标识符。
  - `shmaddr`：指定附加地址，通常设为 `NULL`（由内核选择地址）。
  - `shmflg`：附加标志，如 `SHM_RDONLY`（只读模式）。
- **返回值**：  
  成功返回指向共享内存起始地址的指针（`addr`），失败返回 `(void*)-1`。

### **3. 使用共享内存**
- **直接读写**：通过 `addr` 指针像操作普通内存一样访问共享数据。
- **同步机制**：  
  共享内存本身不提供同步，需结合信号量（`semaphores`）或互斥锁（`mutex`）避免竞态条件。

### **4. 分离共享内存：`shmdt()`**
- **功能**：  
  将共享内存段从进程的地址空间分离，之后进程无法再通过 `addr` 访问该内存。
- **注意**：
  - 分离后，共享内存段仍存在于系统中，直到被显式删除。
  - 进程终止时会自动分离所有附加的共享内存。

### **5. 删除共享内存段：`shmctl()`**
- **功能**：  
  控制共享内存段的行为，如删除（`IPC_RMID`）、获取信息（`IPC_STAT`）或修改权限（`IPC_SET`）。
- **关键操作**：
  - 使用 `IPC_RMID` 标记共享内存段为待删除。  
  - **实际删除发生在所有附加进程分离该段且无其他引用时**。

**注意事项**

1. **键值唯一性**：  
        确保不同进程使用相同的 `key` 访问同一共享内存段。`ftok()` 根据文件路径和项目ID生成唯一键值。
    
2. **权限控制**：  
        `shmget()` 的权限模式（如 `0666`）需允许其他进程访问。
    
3. **同步问题**：  
        必须使用信号量等机制协调读写操作，避免数据损坏。
    
4. **资源泄漏**：  
        未删除的共享内存段会持续占用系统资源，可通过 `ipcs -m` 查看，`ipcrm -m <shmid>` 手动删除。
